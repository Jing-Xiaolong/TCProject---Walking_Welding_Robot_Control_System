<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="Walking_Robot_Control" Id="{fd460483-4c15-45e9-a130-c38eb726d511}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Walking_Robot_Control
VAR_INPUT
	// ====== 模块动作信号(按动作先后排列) ======
	Power_Execute 			: BOOL;							// 上电使能
	Axis_Power				: ARRAY[1..18] OF BOOL;		// 单电机上电
	Robot_Power				: BOOL;							// 所有电机同时上电
	
	Home_Execute			: BOOL;							// 找零使能
	Leg_Home_Set			: ARRAY[1..6] OF BOOL;			// 单腿找零
	Axis_Home_Set			: ARRAY[1..18] OF BOOL;		// 单电机找零
	Robot_Home_Set			: BOOL;							// 所有电机同时找零
	
	Reset_Execute			: BOOL;							// 重置使能
	Axis_Reset				: ARRAY[1..18] OF BOOL;		// 单电机重置
	Robot_Reset				: BOOL;							// 所有电机同时重置
	
	Move_Execute			: BOOL;							// 绝对运动使能
	Robot_Stand_Execute		: BOOL;							// 机器人站立程序使能	
	Axis_Absolute_Eable		: ARRAY[1..18] OF BOOL;		// 单电机绝对运动
	Axis_Move_Position		: ARRAY[1..18] OF LREAL;		// 单电机绝对运动位置			
END_VAR

VAR
	// ====== NC轴变量 ======
	Axis_Robot				: ARRAY[1..18] OF Axis;			// 定义六足轴参量(可以调整数据上限来调整电机数目)
	Leg_Number				: INT;							// 定义六足腿数量
	Axis_Number 			: INT;							// 定义留住轴数量
	
	// ====== 状态监测变量 ======
	Power_Status			: ARRAY[1..18] OF BOOL;		// 单电机上电状态
	Robot_Home_Done			: BOOL;							// 六足机器人找零完成信号
	Tripod_Home_Done		: ARRAY[1..2] OF BOOL;			// 单组腿(一组三条,134或246)找零完成信号
	Leg_Home_Done			: ARRAY[1..6] OF BOOL;			// 单条腿找零完成信号
	Home_Done				: ARRAY[1..18] OF BOOL;		// 单电机找零完成信号
	MoveAbsoluteDone		: ARRAY[1..18] OF BOOL;		// 单电机运动监测信号
	
	Robot_Error				: BOOL;							// 机器人错误信号
	Axis_Error				: ARRAY[1..18] OF BOOL;		// 单电机错误信号
	Axis_ErrorID			: ARRAY[1..18] OF UDINT;		// 单电机错误码
	
	Axis_ActPostion			: ARRAY[1..18] OF LREAL;		// 单电机轴实际位置
	Axis_ActVelocity		: ARRAY[1..18] OF LREAL;		// 单电机轴实际速度
	
	// ====== Simulink模型与控制模型映射 ======
	// 需要注意映射前后分别代表什么
	Mapping_ActPosition		: Variable_Control_Mapping_Model;// 电机位置映射
	Motor_ActPosition		: ARRAY[1..18] OF LREAL;		// Mapping后的电机轴实际位置
	
	Max_Turque_Value		: INT;							// 设置最大力矩边界值
	
	Mapping_Current			: Variable_Control_Mapping_Model;// 电流值映射
	Current_Turque_Value AT%IW0 : ARRAY[1..18] OF INT;		// 驱动检测到的实际电机的力矩
	Current_Before_Mapping	: ARRAY[1..18] OF LREAL ;		// 将Current_Turque_Value从INT转换成LREAL,用来进行变量监测
	Current_After_Mapping	: ARRAY[1..18] OF LREAL;		// 映射后的电流值,即Simulink对应腿的电流
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
Variable_Monitor();				// 变量监测程序

Logic_Control();				// 逻辑控制程序

Variable_Set();					// 变量设定程序

Leg_Action();					// 单腿运动程序

Robot_Action();					// 机器人整体运动程序

Robot_Single_Motor_Action();	// 机器人单个电机运动程序
]]></ST>
    </Implementation>
    <Action Name="Leg_Action" Id="{4c1abdbd-87a5-4a2a-b095-1d68b1c20f72}">
      <Implementation>
        <ST><![CDATA[
// ====== 机器人单挑腿找零程序 ======
IF Home_Execute THEN
	FOR Leg_Number := 1 TO 6 {BY 1} DO
		IF Leg_Home_Set[Leg_Number] THEN
			// 某条腿找零,即代表该条腿上的三个电机就开始找零
			Axis_Home_Set[1+(Leg_Number-1)*3] := Leg_Home_Set[Leg_Number];
			Axis_Home_Set[2+(Leg_Number-1)*3] := Leg_Home_Set[Leg_Number];
			Axis_Home_Set[3+(Leg_Number-1)*3] := Leg_Home_Set[Leg_Number];
		ELSIF Home_Done[1+(Leg_Number-1)*3] AND Home_Done[2+(Leg_Number-1)*3] AND Home_Done[3+(Leg_Number-1)*3] THEN
			// 某条腿上三个电机找零结束,[单腿找零]信号关闭
			// 实际上,这个ELSIF不可能进入,因为Home_Done是一个宽度为PLC周期的脉冲信号,一腿上三个电机不可能同时找零完成
			// 在Logic_Control中规定了Home_Done信号发生即对Axis_Home_Set置FALSE,因此不用担心找零完成后[单电机找零]还处于开启状态
			Leg_Home_Set[Leg_Number] := FALSE; 
			Axis_Home_Set[1+(Leg_Number-1)*3] := FALSE;
			Axis_Home_Set[2+(Leg_Number-1)*3] := FALSE;
			Axis_Home_Set[3+(Leg_Number-1)*3] := FALSE;
		END_IF
					
		// 由于Home_Done信号不会同时发生,因此不能用它来判断是否单腿找零完成(单腿三电机都找零完成),可以适用位置来判断
		// Simulink模型规定的单腿三电机初始位置与实际位置误差均小于0.01后,即可认为单腿找零完成
		// 这里的Walking_Robot_Movement.Mapping_Position.Controller_Leg_Variable也可使用Axis_Robot[Axis_Number].Home_Absolute_Position
		// 因为已经在Variable_Set中将前者设定为后者了
		IF ABS(Walking_Robot_Movement.Mapping_Position.Controller_Leg_Variable[1+(Leg_Number-1)*3]-Axis_ActPostion[1+(Leg_Number-1)*3])<0.01 AND 
			ABS(Walking_Robot_Movement.Mapping_Position.Controller_Leg_Variable[2+(Leg_Number-1)*3]-Axis_ActPostion[2+(Leg_Number-1)*3])<0.01 AND
			ABS(Walking_Robot_Movement.Mapping_Position.Controller_Leg_Variable[3+(Leg_Number-1)*3]-Axis_ActPostion[3+(Leg_Number-1)*3])<0.01 THEN
			Leg_Home_Done[Leg_Number]	:= TRUE;
		ELSE
			Leg_Home_Done[Leg_Number]	:= FALSE;
		END_IF

		// 单组三腿135均完成找零,则该组腿找零完成
		IF Leg_Home_Done[1] AND Leg_Home_Done[3] AND Leg_Home_Done[5] THEN
			Tripod_Home_Done[1]		:= TRUE;
		ELSE
			Tripod_Home_Done[1]		:= FALSE;
		END_IF
		// 单组三腿246均完成找零,则该组腿找零完成
		IF Leg_Home_Done[2] AND Leg_Home_Done[4] AND Leg_Home_Done[6] THEN
			Tripod_Home_Done[2]		:= TRUE;
		ELSE
			Tripod_Home_Done[2]		:= FALSE;
		END_IF
		
		// 两组都找零完成,则整个机器人找零完成
		IF Tripod_Home_Done[1]	AND Tripod_Home_Done[2]	THEN
			Robot_Home_Done			:= TRUE;
		ELSE
			Robot_Home_Done			:= FALSE;
		END_IF
	END_FOR
END_IF

// ====== 机器人其它单腿运动程序 ======]]></ST>
      </Implementation>
    </Action>
    <Action Name="Logic_Control" Id="{c215c7dc-fc9f-4378-b645-9582d910ac24}">
      <Implementation>
        <ST><![CDATA[// =======================控制逻辑区==========================
// 保证所有的动作拥有合理的先后顺序，优化控制逻辑
// 也防止出现两个或两个以上动作同时进行的情况，保证控制安全

// ====== 电机驱动重置逻辑 ======
IF Axis_Error[1] OR Axis_Error[2] OR Axis_Error[3] OR Axis_Error[4] OR Axis_Error[5] OR Axis_Error[6]
	 OR Axis_Error[7] OR Axis_Error[8] OR Axis_Error[9] OR Axis_Error[10] OR Axis_Error[11] OR Axis_Error[12]
		OR Axis_Error[13] OR Axis_Error[14] OR Axis_Error[15] OR Axis_Error[16] OR Axis_Error[17] OR Axis_Error[18] THEN
	// 某一个电机出现错误,代表整个六足即有错
	Robot_Error := TRUE;
ELSE
	Robot_Error := FALSE;
END_IF

IF Robot_Error THEN
	// 电机出现错误,则[驱动重置]开关开启,允许重置
	Reset_Execute := TRUE;
ELSIF NOT Robot_Error THEN
	// 电机没有错误,则[驱动重置]开关关闭,不允许重置
	Reset_Execute := FALSE;
END_IF

	// [重置使能]关闭,所有电机均不能重置
IF NOT Reset_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Reset[Axis_Number] := FALSE;
		Axis_Robot[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF

	// 这五行两个作用： 1. 若电机没错误,则不允许重置
	// 2. 清除错误后自动将[单电机重置]信号关闭,不然得手动关闭
FOR Axis_Number := 1 TO 18 {BY 1} DO
	IF NOT Axis_Error[Axis_Number] THEN
		Axis_Reset[Axis_Number] := FALSE;
	END_IF
END_FOR

// ====== 上电程序逻辑 ======
IF NOT Power_Execute THEN
	// [上电使能]关闭,所有电机必须立即断电
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Power[Axis_Number] := FALSE;
		Axis_Robot[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
	// 未上电时，不能进行找零
	Home_Execute := FALSE;			
	// 未上电时，不能进行运动
	Move_Execute := FALSE;			
END_IF

// ====== 找零程序逻辑 ======
IF Home_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		// 	丝杠到达零点位置后，单电机标零使能位关闭		
		IF Home_Done[Axis_Number] THEN				
			Axis_Home_Set[Axis_Number] :=0;	
			Axis_Robot[Axis_Number].Home(Drive_Home:= Axis_Home_Set[Axis_Number]);
		END_IF
	END_FOR
	// 设定零点时，不能进行运动
	Move_Execute :=0;							
ELSIF NOT Home_Execute THEN
	// [找零使能]关闭,不允许找零
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Home_Set[Axis_Number] := 0;
	END_FOR
END_IF

// ====== 机器人站立逻辑 ======
IF Move_Execute THEN
	// 站立运动使能时，机器人调零必须结束
	Home_Execute := FALSE;
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		// 	丝杠到达设定位置后，单电机绝对运动使能位关闭
		IF MoveAbsoluteDone[Axis_Number] THEN	
			Axis_Absolute_Eable[Axis_Number] := FALSE;
		END_IF
	END_FOR
ELSIF NOT Move_Execute THEN						
	// 站立运动不使能,轴不能运动
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Absolute_Eable[Axis_Number] := FALSE;
		Axis_Robot[Axis_Number].Move_Absolute(	Drive_Move_Absolute:= Axis_Absolute_Eable[Axis_Number], 
												Absolute_Position:= Axis_Move_Position[Axis_Number]);
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Robot_Action" Id="{103d6b73-9e52-4067-a668-c66b63a8003e}">
      <Implementation>
        <ST><![CDATA[// =================机器人整体运动命令区======================
// 六足所有电机整体控制

// ====== 机器人所有驱动同时重置 ======
IF Robot_Reset THEN
	// [重置使能]前提下,才能重置
	IF Reset_Execute THEN
		FOR Axis_Number := 1 TO 18 {BY 1} DO
			Axis_Reset[Axis_Number] := TRUE;
			Axis_Robot[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
		END_FOR
	END_IF
END_IF	

// ====== 机器人所有电机同时上电 ======
IF Robot_Power THEN	
	// [上电使能]前提下,才能上电
	IF Power_Execute THEN
		FOR Axis_Number := 1 TO 18 {BY 1} DO
			Axis_Power[Axis_Number] := TRUE ;
			Axis_Robot[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
		END_FOR
	END_IF
END_IF
	
// ====== 机器人所有电机同时找零 ======
IF Robot_Home_Set THEN
	IF Home_Execute THEN
		// 在整机调零时,1\3\5三条腿或者2\4\6三条腿同时找零,由于总需要3条腿触地支撑,因此不能6条腿同时找零
		// 因此,某组腿找零,另一组不允许找零. (机器人吊起时,六腿离地,可以6腿找零,但为了安全不考虑该情况)
		IF Leg_Home_Set[1] OR Leg_Home_Set[3] OR Leg_Home_Set[5] THEN
			Leg_Home_Set[1] := TRUE;
			Leg_Home_Set[3] := TRUE;
			Leg_Home_Set[5] := TRUE;
			Leg_Home_Set[2] := FALSE;
			Leg_Home_Set[4] := FALSE;
			Leg_Home_Set[6] := FALSE;
		END_IF
		IF Leg_Home_Set[2] OR Leg_Home_Set[4] OR Leg_Home_Set[6] THEN
			Leg_Home_Set[2] := TRUE;
			Leg_Home_Set[4] := TRUE;
			Leg_Home_Set[6] := TRUE;
			Leg_Home_Set[1] := FALSE;
			Leg_Home_Set[3] := FALSE;
			Leg_Home_Set[5] := FALSE;
		END_IF
	ELSIF NOT Home_Execute THEN
		// [找零使能]关闭,不允许找零
		FOR Leg_Number := 1 TO 6 {BY 1} DO
			Leg_Home_Set[Leg_Number] := FALSE;
		END_FOR
	END_IF
ELSIF NOT Robot_Home_Set AND NOT Home_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Home_Set[Axis_Number] := FALSE;
	END_FOR
END_IF

// ====== 机器人站立,用于Visu_Walking_Robot_Stand调试 ======
IF Robot_Stand_Execute THEN
	IF Move_Execute THEN
		FOR Axis_Number := 1 TO 18 {BY 1} DO
			// 丝杠到达设定位置后，单电机绝对运动使能位关闭
			IF MoveAbsoluteDone[Axis_Number] THEN		
				Axis_Absolute_Eable[Axis_Number] := FALSE;
			ELSE
				Axis_Absolute_Eable[Axis_Number] := TRUE;
			END_IF
		END_FOR
	END_IF
ELSIF NOT Robot_Stand_Execute AND NOT Move_Execute THEN 
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Absolute_Eable[Axis_Number] := FALSE;
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Robot_Single_Motor_Action" Id="{b0d2189b-618b-43c8-9d18-e11ffa78b97b}">
      <Implementation>
        <ST><![CDATA[
// ====== 单电机驱动重置 ======
IF Reset_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Robot[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机上电 ======
IF Power_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Robot[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机找零 ======
IF Home_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Robot[Axis_Number].Home(Drive_Home:= Axis_Home_Set[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机站立 ======
IF Move_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Robot[Axis_Number].Move_Absolute(	Drive_Move_Absolute:= Axis_Absolute_Eable[Axis_Number], 
												Absolute_Position:= Axis_Move_Position[Axis_Number]);
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Safety" Id="{542f773f-76d3-4f8a-a71b-dd89f39b1cbb}">
      <Implementation>
        <ST><![CDATA[// 保证丝杠行程和电机速度在规定范围内]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Monitor" Id="{ba544c5b-3975-4680-8681-575f377c08d2}">
      <Implementation>
        <ST><![CDATA[// =====================关键数据信号监测======================

// ====== 设置最大力矩(边界控制条件) ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	Axis_Robot[Axis_Number].Max_Turque_Value := Max_Turque_Value;
END_FOR

// ====== 检测、映射力矩 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	// 检测实际力矩,Current_Turque_Value 链接到I/O中对应电机的Digital_Input_1(即驱动监测到的实际力矩)
	Axis_Robot[Axis_Number].Current_Turque_Value := Current_Turque_Value[Axis_Number];
	// 驱动监测到的实际力矩为INT,而Mapping_Current的输入,输出均是LREAL,需要进行变量强制转换
	Current_Before_Mapping[Axis_Number] := INT_TO_LREAL(Current_Turque_Value[Axis_Number]);
END_FOR
	// 将检测到的电机实际力矩,映射到Simulink控制模型中对应腿的力矩
Mapping_Current(Controller_Leg_Variable:= Current_Before_Mapping, Model_Leg_Variable=> Current_After_Mapping);

// ====== 检测轴实际位置、速度检测区 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	Axis_ActPostion[Axis_Number] := Axis_Robot[Axis_Number].ActPosition;
	Axis_ActVelocity[Axis_Number] := Axis_Robot[Axis_Number].ActVelocity;
END_FOR
	// 将检测到的电机实际位置,映射到Simulink控制模型中对应腿的位置
Mapping_ActPosition(Controller_Leg_Variable:= Axis_ActPostion, Model_Leg_Variable=> Motor_ActPosition);

// ====== 检测上电状态 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	Power_Status[Axis_Number] := Axis_Robot[Axis_Number].State_PowerStatus;
END_FOR

// ====== 检测找零状态 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	Home_Done[Axis_Number] := Axis_Robot[Axis_Number].State_HomeDone;
END_FOR

// ====== 检测绝对运动状态 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	MoveAbsoluteDone[Axis_Number] := Axis_Robot[Axis_Number].State_MoveAbsoluteDone;
END_FOR

// ====== 检测电机错误 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	Axis_Error[Axis_Number] := Axis_Robot[Axis_Number].Axis_Error;
	Axis_ErrorID[Axis_Number] := Axis_Robot[Axis_Number].Axis_ErrorID;
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Set" Id="{bb26148f-2045-404a-a802-a94df446518b}">
      <Implementation>
        <ST><![CDATA[// 注意：找零有两个过程
//		1. 丝杠回退到顶点,设置该处为零点  
//		2. 设完零点后运动到Simulink模型中各电机的初始位置(一般不为零)

// ====== 设定速度 ======
FOR Axis_Number := 1 TO 18 {BY 1} DO
	// 设定每个轴找零时过程1的速度
	Axis_Robot[Axis_Number].Home_Velocity 	:= 20;
	// 设定每个轴进行相对运动的速度
	Axis_Robot[Axis_Number].Move_Relative_Velocity	:=30;
END_FOR

IF Home_Execute THEN
	// 设定每各轴找零时过程2的速度,此速度可以保证每个轴不会在地面拖拽
	Axis_Robot[1].Move_Absolute_Velocity :=17;
	Axis_Robot[3].Move_Absolute_Velocity :=17; 
	Axis_Robot[4].Move_Absolute_Velocity :=16.74;
	Axis_Robot[6].Move_Absolute_Velocity :=16.74; 
	Axis_Robot[7].Move_Absolute_Velocity :=17.3; 
	Axis_Robot[9].Move_Absolute_Velocity :=17.3;
	Axis_Robot[10].Move_Absolute_Velocity :=16.95; 
	Axis_Robot[12].Move_Absolute_Velocity :=16.95; 
	Axis_Robot[13].Move_Absolute_Velocity :=17;
	Axis_Robot[15].Move_Absolute_Velocity :=17; 
	Axis_Robot[16].Move_Absolute_Velocity :=17; 
	Axis_Robot[18].Move_Absolute_Velocity :=17;
	Axis_Robot[2].Move_Absolute_Velocity :=20; 
	Axis_Robot[5].Move_Absolute_Velocity :=19.8; 
	Axis_Robot[8].Move_Absolute_Velocity :=20;
	Axis_Robot[11].Move_Absolute_Velocity :=20; 
	Axis_Robot[14].Move_Absolute_Velocity :=20; 
	Axis_Robot[17].Move_Absolute_Velocity :=20;
ELSE
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		// 如果不处在找零时,则绝对运动速度设一个较小值,保证安全
		Axis_Robot[Axis_Number].Move_Absolute_Velocity	:=10;
	END_FOR
END_IF

// ====== 规定绝对运动位置 ======
	// 每次进行绝对位置都运动到160mm处
FOR Axis_Number := 1 TO 18 {BY 1} DO
	Axis_Move_Position[Axis_Number] := 160;
END_FOR

// ====== 规定最大力矩 ======
	// 此力矩用于判定在找零时过程1是否丝杠顶到了顶点
	// 该值不宜过大或过小,过大会损坏丝杠,过小会使找零过程2使脚触地后被判断为顶到了顶点
	// 经测试可以设置为1400,找零过程2脚触底的力矩值约在1000出头
Max_Turque_Value := 1400;

// ====== 设定电机找零时过程2的Simulink初始位置 =======
IF Home_Execute THEN
	FOR Axis_Number := 1 TO 18 {BY 1} DO
		Axis_Robot[Axis_Number].Home_Absolute_Position := Walking_Robot_Movement.Mapping_Position.Controller_Leg_Variable[Axis_Number];
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Walking_Robot_Control">
      <LineId Id="3" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Leg_Action">
      <LineId Id="43" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="5" Count="3" />
      <LineId Id="48" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="62" Count="1" />
      <LineId Id="15" Count="1" />
      <LineId Id="18" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="30" Count="5" />
      <LineId Id="69" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="39" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Logic_Control">
      <LineId Id="105" Count="18" />
      <LineId Id="178" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="187" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="128" Count="49" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Robot_Action">
      <LineId Id="2" Count="2" />
      <LineId Id="96" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="9" Count="6" />
      <LineId Id="106" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="105" Count="0" />
      <LineId Id="19" Count="4" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="110" Count="1" />
      <LineId Id="117" Count="2" />
      <LineId Id="109" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="115" Count="1" />
      <LineId Id="120" Count="2" />
      <LineId Id="114" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="85" Count="0" />
      <LineId Id="55" Count="9" />
      <LineId Id="103" Count="0" />
      <LineId Id="65" Count="11" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Robot_Single_Motor_Action">
      <LineId Id="2" Count="8" />
      <LineId Id="12" Count="19" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Safety">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Variable_Monitor">
      <LineId Id="102" Count="0" />
      <LineId Id="54" Count="32" />
      <LineId Id="91" Count="10" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Walking_Robot_Control.Variable_Set">
      <LineId Id="126" Count="2" />
      <LineId Id="110" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="9" Count="4" />
      <LineId Id="131" Count="2" />
      <LineId Id="14" Count="2" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>