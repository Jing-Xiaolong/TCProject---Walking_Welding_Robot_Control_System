<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="Welding_Arm_Control" Id="{79012545-a31d-43cd-9623-21b4a0000016}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Welding_Arm_Control

VAR CONSTANT
	MotorNum					: INT := 6;								// 接入控制的电机数量
END_VAR

VAR_INPUT
	// ====== 模块动作信号(按动作先后排列) ======
	Power_Execute 				: BOOL;									// 上电使能
	Axis_Power					: ARRAY[1..MotorNum] OF BOOL;			// 单电机上电
	Welding_Arm_Power			: BOOL;									// 焊接臂所有电机上电
	
	Home_Execute				: BOOL;									// 找零使能
	Axis_Home_Set				: ARRAY[1..MotorNum] OF BOOL;			// 单电机找零
	Welding_Arm_Home_Set		: BOOL;									// 焊接臂所有电机找零

	Reset_Execute				: BOOL;									// 电机驱动重置使能
	Axis_Reset					: ARRAY[1..MotorNum] OF BOOL;			// 单电机驱动重置
	Welding_Arm_Reset			: BOOL;									// 焊接臂整体电机驱动重置
	
	Welding_Arm_Move_Execute	: BOOL;									// 焊接臂运动程序使能	
	Move_Absolute_Execute		: BOOL;									// 绝对运动使能
	Move_Relative_Execute		: BOOL;									// 相对运动使能
	Axis_Absolute_Eable			: ARRAY[1..MotorNum] OF BOOL;			// 单电机绝对运动使能
	Axis_Relative_Eable			: ARRAY[1..MotorNum] OF BOOL;			// 单电机相对运动使能
	Axis_Move_Absolute_Position	: ARRAY[1..MotorNum] OF LREAL;			// 单电机绝对运动位置
	Axis_Move_Relative_Position	: ARRAY[1..MotorNum] OF LREAL;			// 单电机相对运动位置			
	
END_VAR
VAR
	// ====== NC轴变量 ======
	Axis_Welding_Arm			: ARRAY[1..MotorNum] OF Axis;			// 定义焊接臂轴参量(可以调整数据上限来调整电机数目)
	Axis_Number 				: INT;									// 定义轴数目
	
	// ====== 状态监测变量 ======
	Power_Status				: ARRAY[1..MotorNum] OF BOOL;			// 单电机上电状态
	Home_Done					: ARRAY[1..MotorNum] OF BOOL;			// 单电机找零状态
	Welding_Arm_Home_Done		: BOOL;									// 机器臂找零完成状态
	MoveAbsoluteDone			: ARRAY[1..MotorNum] OF BOOL;			// 单电机绝对运动状态
	MoveRelativeDone			: ARRAY[1..MotorNum] OF BOOL;			// 单电机相对运动状态
	
	Welding_Arm_Error			: BOOL;									// 焊接臂电机错误信号
	Axis_Error					: ARRAY[1..MotorNum] OF BOOL;			// 单电机错误信号
	Axis_ErrorID				: ARRAY[1..MotorNum] OF UDINT;			// 单电机错误码
	
	Axis_ActPostion				: ARRAY[1..MotorNum] OF LREAL;			// 单电机实际位置
	Axis_ActVelocity			: ARRAY[1..MotorNum] OF LREAL;			// 单电机实际速度
	
	Current_Turque_Value  AT%IW0: ARRAY[1..MotorNum] OF INT ;			// 单电机实际电流
	Digital_Inputs  	  AT%I* : ARRAY[1..MotorNum] OF DINT ;			// 驱动数字输入信号（Link到驱动器中的Digital Inputs）
	
	Home_Switch_value 			: ARRAY[1..MotorNum] OF BOOL;			// 限位开关值
	
	Max_Turque_Value 			: INT ;									// 最大电流边界值(机械限位法找零时用来判断运动极限位置)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
Variable_Monitor();					// 变量监测程序

Logic_Control();					// 逻辑控制程序

Variable_Set();						// 变量设置程序

Welding_Arm_Action();				// 焊接臂整体运动程序

Welding_Arm_Single_Motor_Action();	// 焊接臂单电机运动程序

//Safety();							// 强安全措施程序]]></ST>
    </Implementation>
    <Action Name="Logic_Control" Id="{60bb903e-37d0-49e2-bab0-77b04b805bd2}">
      <Implementation>
        <ST><![CDATA[// =======================控制逻辑区==========================
// 保证所有的动作拥有合理的先后顺序，优化控制逻辑
// 也防止出现两个或两个以上动作同时进行的情况，保证控制安全

// ====== 电机驱动重置逻辑 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	IF Axis_Error[Axis_Number] THEN
		Welding_Arm_Error := TRUE;
		EXIT;
	END_IF
	Welding_Arm_Error := FALSE;
END_FOR

IF Welding_Arm_Error THEN
	Reset_Execute := TRUE;
ELSIF NOT Welding_Arm_Error THEN
	Reset_Execute := FALSE;
END_IF

IF NOT Reset_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Reset[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF
	// 没有错误则不允许按按钮,或清除了错误按钮回弹
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	IF NOT Axis_Error[Axis_Number] THEN
		Axis_Reset[Axis_Number] := FALSE;
	END_IF
END_FOR

// ====== 上电逻辑 ======
IF NOT Power_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Power[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// ====== 找零逻辑 ======
IF Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF Home_Done[Axis_Number] THEN			// 	丝杠到达零点位置后，单电机标零使能位关闭			
			Axis_Home_Set[Axis_Number] := FALSE;	
			Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := NOT Home_Switch_value[Axis_Number]);
		END_IF
	END_FOR
	Move_Absolute_Execute := FALSE;							// 设定零点时，不能进行其他运动
	//ExSetPoint_Execute :=0;
ELSIF NOT Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		//Axis_Start_Back[Axis_Number] :=0;
		Axis_Home_Set[Axis_Number] := FALSE;
	END_FOR
END_IF

// ====== 绝对运动逻辑 ======
IF Move_Absolute_Execute THEN
	//Absolute_Eable := TRUE;
	Home_Execute := FALSE;							// 运动运动使能时，焊接臂调零必须结束
	//ExSetPoint_Execute :=0;						// 运动运动时，不能进行其他运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF MoveAbsoluteDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机绝对运动使能位关闭
			Axis_Absolute_Eable[Axis_Number] := FALSE;
		END_IF
	END_FOR
ELSIF NOT Move_Absolute_Execute THEN							// 运动不使能,轴不能运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Absolute_Eable[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Move_Absolute(  Drive_Move_Absolute:= Axis_Absolute_Eable[Axis_Number], 
													  Absolute_Position:= Axis_Move_Absolute_Position[Axis_Number]);
	END_FOR
END_IF

// ====== 焊接臂相对运动逻辑 ======
IF Move_Relative_Execute THEN
	//Relative_Eable := TRUE;
	Home_Execute := FALSE;							// 运动运动使能时，焊接臂调零必须结束
	//ExSetPoint_Execute :=0;						// 运动运动时，不能进行其他运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF MoveRelativeDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机相对运动使能位关闭
			Axis_Relative_Eable[Axis_Number] := FALSE;
			Axis_Welding_Arm[Axis_Number].Move_Relative(  Drive_Move_Relative:= Axis_Relative_Eable[Axis_Number], 
													  Relative_Position:= Axis_Move_Relative_Position[Axis_Number]);
		END_IF
	END_FOR
ELSIF NOT Move_Relative_Execute THEN							// 运动不使能,轴不能运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Relative_Eable[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Move_Relative(  Drive_Move_Relative:= Axis_Relative_Eable[Axis_Number], 
													  Relative_Position:= Axis_Move_Relative_Position[Axis_Number]);
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Safety" Id="{717bd0c8-fe1d-45b7-b6ca-5406f9200f66}">
      <Implementation>
        <ST><![CDATA[// 保证丝杠行程和电机速度在规定范围内

// 如果没在找零，检测到焊接臂升降或径向关节接近开关信号即停止焊接臂上所有电机
IF NOT Home_Execute THEN
	// Digital_Inputs[1].19 为焊接臂升降电机接近开关(下)标识位
	// Digital_Inputs[3].20 为焊接臂径向电机接近开关(远离电机侧)标识位
	IF Digital_Inputs[1].18 OR Digital_Inputs[1].19 OR Digital_Inputs[3].20 OR Digital_Inputs[3].21 THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			//Axis_Power[Axis_Number] := FALSE;
		END_FOR
	END_IF
END_IF

//IF Digital_Inputs[1].18 THEN
//	pos_up := Axis_Welding_Arm[1].ActPosition;
//	range_v := pos_down - pos_up;
//	Axis_Power[1] := FALSE;
//END_IF
//IF Digital_Inputs[1].19 THEN
//	pos_down := Axis_Welding_Arm[1].ActPosition;
//	Axis_Move_Relative_Position[1] := -300;
//ELSE
//	Axis_Move_Relative_Position[1] := 200;
//END_IF

//IF Digital_Inputs[2].20 THEN
//	pos_far := Axis_Welding_Arm[2].ActPosition;
//	range_h := pos_far - pos_near;
//	Axis_Power[2] := FALSE;
//END_IF
//IF Digital_Inputs[2].21 THEN
//	pos_near := Axis_Welding_Arm[2].ActPosition;

//	Axis_Move_Relative_Position[2] := 200;
//ELSE
//	Axis_Move_Relative_Position[2] := 3;
//END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Monitor" Id="{990d9b10-a219-4040-a972-d17adb4d55bb}">
      <Implementation>
        <ST><![CDATA[// =====================关键数据信号监测======================

// ====== 设置最大力矩(边界控制条件) ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Welding_Arm[Axis_Number].Max_Turque_Value := Max_Turque_Value;
END_FOR

// ====== 检测实际力矩 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Welding_Arm[Axis_Number].Current_Turque_Value := Current_Turque_Value[Axis_Number];
END_FOR

// ====== 检测轴实际位置、速度 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_ActPostion[Axis_Number] 	:= Axis_Welding_Arm[Axis_Number].ActPosition;
	Axis_ActVelocity[Axis_Number] 	:= Axis_Welding_Arm[Axis_Number].ActVelocity;
END_FOR

// ====== 检测上电状态 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Power_Status[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_PowerStatus;
END_FOR

// ====== 检测找零状态 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Home_Done[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_HomeDone;
END_FOR

// ====== 检测电机绝对运动状态 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	MoveAbsoluteDone[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_MoveAbsoluteDone;
END_FOR

// ====== 检测电机相对运动状态 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	MoveRelativeDone[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_MoveRelativeDone;
END_FOR

// ====== 检测电机错误 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Error[Axis_Number] 	:= Axis_Welding_Arm[Axis_Number].Axis_Error;
	Axis_ErrorID[Axis_Number] 	:= Axis_Welding_Arm[Axis_Number].Axis_ErrorID;
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Set" Id="{a1de471f-d52b-4f14-bf3e-67a0329132aa}">
      <Implementation>
        <ST><![CDATA[// ====== 设置速度 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO							//此时每一个电机的速度都是一样的
	Axis_Welding_Arm[Axis_Number].Home_Velocity 	:= 5;			//找零速度(Axis_Jog中的速度)
	Axis_Welding_Arm[Axis_Number].Move_Relative_Velocity	:=5;	//相对运动速度
END_FOR
IF Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Move_Absolute_Velocity := 5;	//找零之后运动至轨迹起始点的速度
	END_FOR
ELSE
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Welding_Arm[Axis_Number].Move_Absolute_Velocity	:=10;
	END_FOR
END_IF
	

// ====== 设置绝对运动位置 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Move_Absolute_Position[Axis_Number] := 100;
END_FOR

// ====== 设置相对运动距离 ======
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Move_Relative_Position[Axis_Number] := -15;
END_FOR

// ====== 设置最大力矩(找零过程判断已到丝杠顶点) ======
Max_Turque_Value := 1400;

// ====== 设置电机设零后到达Simulink模型初始位置 ======
IF Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Home_Absolute_Position := Welding_Arm_Movement.ExSetPoint_Position[Axis_Number];
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Welding_Arm_Action" Id="{a376d136-08d7-4e08-95f0-2d04950c7bb2}">
      <Implementation>
        <ST><![CDATA[// =================焊接臂整体运动命令区======================
// 六足所有电机整体控制

// ====== 焊接臂所有电机驱动重置 ======
IF Welding_Arm_Reset THEN							// 缺少输入
	IF Reset_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Reset[Axis_Number] := TRUE;
			Axis_Welding_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
		END_FOR
	END_IF
END_IF	

// ====== 焊接臂所有电机上电 ======
IF Welding_Arm_Power THEN	
	IF Power_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Power[Axis_Number] := TRUE ;
		END_FOR
	END_IF
END_IF
	
// ====== 焊接臂所有电机找零 ======
IF Welding_Arm_Home_Set THEN
	IF Home_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			IF NOT Home_Done[Axis_Number] THEN
				Axis_Home_Set[Axis_Number] := TRUE;
				Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := NOT Home_Switch_value[Axis_Number]);
			ELSIF Home_Done[Axis_Number] THEN
				Axis_Home_Set[Axis_Number] := FALSE;
				Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := NOT Home_Switch_value[Axis_Number]);
			END_IF
		END_FOR
	ELSIF NOT Home_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Home_Set[Axis_Number] := FALSE;
		END_FOR
	END_IF
ELSIF NOT Welding_Arm_Home_Set AND NOT Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Home_Set[Axis_Number] := FALSE;
	END_FOR
END_IF

IF Home_Execute THEN
	IF ABS(Welding_Arm_Movement.ExSetPoint_Position[1]-Axis_ActPostion[1]) < 0.1 AND
		ABS(Welding_Arm_Movement.ExSetPoint_Position[2]-Axis_ActPostion[2]) < 0.1 AND
		 ABS(Welding_Arm_Movement.ExSetPoint_Position[3]-Axis_ActPostion[3]) < 0.1 AND
		  ABS(Welding_Arm_Movement.ExSetPoint_Position[4]-Axis_ActPostion[4]) < 0.1 AND
		   ABS(Welding_Arm_Movement.ExSetPoint_Position[5]-Axis_ActPostion[5]) < 0.1 AND
			ABS(Welding_Arm_Movement.ExSetPoint_Position[6]-Axis_ActPostion[6]) < 0.1 THEN
		Welding_Arm_Home_Done := TRUE;
	END_IF
ELSIF NOT Home_Execute THEN
	Welding_Arm_Home_Done := FALSE;
END_IF

// ====== 焊接臂所有电机绝对运动 ======
IF Welding_Arm_Move_Execute THEN
	IF Move_Absolute_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			IF MoveAbsoluteDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机绝对运动使能位关闭
				Axis_Absolute_Eable[Axis_Number] := FALSE;
			ELSE
				Axis_Absolute_Eable[Axis_Number] := TRUE;
			END_IF
		END_FOR
	END_IF
ELSIF NOT Welding_Arm_Move_Execute AND NOT Move_Absolute_Execute THEN 
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Absolute_Eable[Axis_Number] := FALSE;
	END_FOR
END_IF

// ====== 焊接臂所有电机相对运动 ======
IF Welding_Arm_Move_Execute THEN
	IF Move_Relative_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			IF MoveRelativeDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机相对运动使能位关闭
				Axis_Relative_Eable[Axis_Number] := FALSE;
			ELSE
				Axis_Relative_Eable[Axis_Number] := TRUE;
			END_IF
		END_FOR
	END_IF
ELSIF NOT Welding_Arm_Move_Execute AND NOT Move_Relative_Execute THEN 
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Relative_Eable[Axis_Number] := FALSE;
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Welding_Arm_Single_Motor_Action" Id="{193f3b60-8870-4865-85f5-7a8d8ad5cf12}">
      <Implementation>
        <ST><![CDATA[
// ====== 单电机驱动重置 ======
IF Reset_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机上电 ======
IF Power_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机找零 ======
IF Home_Execute THEN
	// 如果用模型控制，必须加上下面一句话
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF Axis_Number = 3 THEN
			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].21;		// 焊接臂径向电机接近开关(靠近电机侧)标识位
		ELSE
			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].18;
		END_IF
		
		Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := Home_Switch_value[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机绝对移动 ======
IF Move_Absolute_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Move_Absolute(	Drive_Move_Absolute:= Axis_Absolute_Eable[Axis_Number], 
														Absolute_Position:= Axis_Move_Absolute_Position[Axis_Number]);
	END_FOR
END_IF

// ====== 单电机相对移动 ======
IF Move_Relative_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Move_Relative(	Drive_Move_Relative:= Axis_Relative_Eable[Axis_Number], 
														Relative_Position:= Axis_Move_Relative_Position[Axis_Number]);
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Welding_Arm_Control">
      <LineId Id="209" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Control.Logic_Control">
      <LineId Id="2" Count="3" />
      <LineId Id="88" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="16" Count="4" />
      <LineId Id="115" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="117" Count="2" />
      <LineId Id="121" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="25" Count="14" />
      <LineId Id="87" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="59" Count="20" />
      <LineId Id="95" Count="8" />
      <LineId Id="113" Count="1" />
      <LineId Id="104" Count="8" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Control.Safety">
      <LineId Id="12" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="37" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="43" Count="3" />
      <LineId Id="56" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="62" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Control.Variable_Monitor">
      <LineId Id="2" Count="9" />
      <LineId Id="46" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="16" Count="10" />
      <LineId Id="31" Count="4" />
      <LineId Id="48" Count="4" />
      <LineId Id="36" Count="6" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Control.Variable_Set">
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="63" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="123" Count="2" />
      <LineId Id="155" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="108" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Control.Welding_Arm_Action">
      <LineId Id="2" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="9" Count="14" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="99" Count="1" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="55" Count="4" />
      <LineId Id="133" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="127" Count="5" />
      <LineId Id="125" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="60" Count="16" />
      <LineId Id="106" Count="16" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Control.Welding_Arm_Single_Motor_Action">
      <LineId Id="2" Count="43" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>